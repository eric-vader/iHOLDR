datasets:
  Function:
    random_seed: 0
    n_samples: 1000
    n_train_ratio: 0.8
    fn_kwargs:
      fn: 'lambda x:np.sin(x)'
      bounds: [[-10,10]]
    noise_kwargs:
      mean: 0
      variance: 0.01
    is_normalize: True

  # GPFunction:
  #   fn_kwargs:
  #     bounds:
  #     - - 0
  #       - 1
  #     - - 0
  #       - 1
  #     - - 0
  #       - 1
  #     - - 0
  #       - 1
  #     kernel: RBF
  #     kernel_kwargs:
  #       lengthscale: 0.1
  #       variance: 0.5
  #   n_samples: 1000
  #   n_train_ratio: 0.8
  #   noise_kwargs:
  #     mean: 0
  #     variance: 0.01
  #   random_seed: 5

  # HpolibFunction: # 2D
  #   random_seed: 0
  #   n_samples: 1000
  #   n_train_ratio: 0.8
  #   fn_kwargs:
  #     hpo_fn_ref: Branin
  #   noise_kwargs:
  #     mean: 0
  #     variance: 0.01
  #   is_normalize: True

  # HpolibFunction:
  #   random_seed: 1
  #   n_samples: 1000
  #   n_train_ratio: 0.8
  #   fn_kwargs:
  #     hpo_fn_ref: Hartmann6
  #   noise_kwargs:
  #     mean: 0
  #     variance: 0.01

  # GPFunction:
  #   random_seed: 0
  #   n_samples: 1000
  #   n_train_ratio: 0.8
  #   fn_kwargs:
  #     bounds: [[0,1], [0,1], [0,1], [0,1], [0,1], [0,1], [0,1]]
  #     kernel: RBF
  #     kernel_kwargs:
  #       lengthscale: 0.1
  #       variance: 0.5
  #   noise_kwargs:
  #     mean: 0
  #     variance: 0.01
      
  # UCIFunction:
  #   is_pre_split: True
  #   random_seed: 0
  #   n_samples: 1000
  #   n_train_ratio: 0.8
  #   fn_kwargs:
  #     dataset: protein
  #   noise_kwargs:
  #     mean: 0
  #     variance: 0.0

algorithms:

  # GeorgeGP:
  #   kernel: ExpSquaredKernel
  #   kernel_kwargs:
  #     lengthscale: gt
  #     scale_variance: gt
  #     noise_variance: 0.01
  #   optimizer_kwargs:
  #     method: L-BFGS-B
  #   random_seed: 4
  #   solver: BasicSolver

  # GPflowGP:
  #   random_seed: 0
  #   kernel: RBF
  #   kernel_kwargs:
  #     lengthscale: 1.0
  #     scale_variance: population
  #     noise_variance: 0.01
  #   optimizer_kwargs:
  #     method: L-BFGS-B

  # SklearnGP:
  #   random_seed: 0
  #   kernel: RBF
  #   kernel_kwargs:
  #     lengthscale: 1.0
  #     scale_variance: population
  #     noise_variance: 0.01
  #   optimizer_kwargs:
  #     optimizer: fmin_l_bfgs_b

  # GPyGP:
  #   random_seed: 0
  #   kernel: RBF
  #   kernel_kwargs:
  #     lengthscale: 1.0
  #     scale_variance: population
  #     noise_variance: 0.01
  #   optimizer_kwargs:
  #     optimizer: lbfgs
  #     max_iters: 15000

  # # SGPR
  # GPyGP:
  #   random_seed: 0
  #   model: SparseGPRegression
  #   model_kwargs:
  #     Z: 512
  #   kernel: RBF
  #   kernel_kwargs:
  #     lengthscale: 1.0
  #     scale_variance: population
  #     noise_variance: 0.01
  #   optimizer_kwargs:
  #     optimizer: adam
  #     max_iters: 100

  # # SVGP
  # GPyGP:
  #   random_seed: 0
  #   model: SVGPRegression
  #   model_kwargs:
  #     Z: 1024
  #     num_latent_functions: 1
  #     batchsize: 1024
  #   kernel: RBF
  #   kernel_kwargs:
  #     lengthscale: 1.0
  #     scale_variance: population
  #     noise_variance: 0.01
  #   optimizer_kwargs:
  #     optimizer: adam
  #     max_iters: 100

  # GeorgeGP:
  #   random_seed: 0
  #   solver: HODLRSolver
  #   rearrange_fn: rearrange_la_pca
  #   re_rearrange: True
  #   rearrange_kwargs:
  #     n_components: 1
  #   sk_kwargs:
  #     kernel: RBF
  #   kernel: ExpSquaredKernel
  #   kernel_kwargs:
  #     lengthscale: 1.0
  #     scale_variance: population
  #     noise_variance: 0.01
  #   optimizer_kwargs:
  #     method: L-BFGS-B
  #   model_kwargs:
  #     tol: 0.1
  #     min_size: 100

  # GeorgeGP:
  #   random_seed: 0
  #   solver: HODLRSolver
  #   rearrange_fn: rearrange_ksort
  #   re_rearrange: True
  #   rearrange_kwargs:
  #     n_components: null
  #   sk_kwargs:
  #     kernel: RBF
  #   kernel: ExpSquaredKernel
  #   kernel_kwargs:
  #     lengthscale: 1.0
  #     scale_variance: population
  #     noise_variance: 0.01
  #   optimizer_kwargs:
  #     method: L-BFGS-B
  #   model_kwargs:
  #     tol: 0.1
  #     min_size: 100

  # GeorgeGP:
  #   random_seed: 0
  #   solver: HODLRSolver
  #   rearrange_fn: rearrange_dsort
  #   re_rearrange: True
  #   rearrange_kwargs:
  #     metric: kernel
  #   sk_kwargs:
  #     kernel: RBF
  #   kernel: ExpSquaredKernel
  #   kernel_kwargs:
  #     lengthscale: 1.0
  #     scale_variance: population
  #     noise_variance: 0.01
  #   optimizer_kwargs:
  #     method: L-BFGS-B
  #   model_kwargs:
  #     tol: 0.1
  #     min_size: 100

  # GeorgeGP:
  #   random_seed: 0
  #   solver: HODLRSolver
  #   rearrange_fn: rearrange_kdtree
  #   sk_kwargs:
  #     kernel: RBF
  #   kernel: ExpSquaredKernel
  #   kernel_kwargs:
  #     lengthscale: 1.0
  #     scale_variance: population
  #     noise_variance: 0.01
  #   optimizer_kwargs:
  #     method: L-BFGS-B
  #   model_kwargs:
  #     tol: 0.1
  #     min_size: 100

  GeorgeGP:
    random_seed: 0
    solver: HODLRSolver
    rearrange_fn: rearrange_la_kpca
    re_rearrange: True
    rearrange_kwargs:
      n_components: 2
    sk_kwargs:
      kernel: RBF
    kernel: ExpSquaredKernel
    kernel_kwargs:
      lengthscale: 1.0
      scale_variance: population
      noise_variance: 0.01
    optimizer_kwargs:
      method: L-BFGS-B
    model_kwargs:
      tol: 0.0001
      min_size: 100

  # GeorgeGP:
  #   random_seed: 0
  #   solver: HODLRSolver
  #   rearrange_fn: rearrange_la_kpca_tree
  #   re_rearrange: True
  #   rearrange_kwargs:
  #     n_components: 2
  #   sk_kwargs:
  #     kernel: RBF
  #   kernel: ExpSquaredKernel
  #   kernel_kwargs:
  #     lengthscale: 1.0
  #     scale_variance: population
  #     noise_variance: 0.01
  #   optimizer_kwargs:
  #     method: L-BFGS-B
  #   model_kwargs:
  #     tol: 0.1
  #     min_size: 100

  # GeorgeGP:
  #   random_seed: 0
  #   solver: HODLRSolver
  #   rearrange_fn: rearrange_dr_rngproj
  #   re_rearrange: True
  #   rearrange_kwargs:
  #     n_components: null
  #   sk_kwargs:
  #     kernel: RBF
  #   kernel: ExpSquaredKernel
  #   kernel_kwargs:
  #     lengthscale: 1.0
  #     scale_variance: population
  #     noise_variance: 0.01
  #   optimizer_kwargs:
  #     method: L-BFGS-B
  #   model_kwargs:
  #     tol: 0.1
  #     min_size: 100

  # GeorgeGP:
  #   random_seed: 0
  #   solver: HODLRSolver
  #   rearrange_fn: rearrange_dr_feata
  #   re_rearrange: False
  #   rearrange_kwargs:
  #     n_clusters: null
  #   sk_kwargs:
  #     kernel: RBF
  #   kernel: ExpSquaredKernel
  #   kernel_kwargs:
  #     lengthscale: 1.0
  #     scale_variance: population
  #     noise_variance: 0.01
  #   optimizer_kwargs:
  #     method: L-BFGS-B
  #   model_kwargs:
  #     tol: 0.1
  #     min_size: 100

  # GeorgeGP:
  #   random_seed: 0
  #   solver: HODLRSolver
  #   rearrange_fn: rearrange_eric
  #   re_rearrange: True
  #   sk_kwargs:
  #     kernel: RBF
  #   kernel: ExpSquaredKernel
  #   kernel_kwargs:
  #     lengthscale: 1.0
  #     scale_variance: population
  #     noise_variance: 0.01
  #   optimizer_kwargs:
  #     method: L-BFGS-B
  #   model_kwargs:
  #     tol: 0.1
  #     min_size: 100      

  # GeorgeGP:
  #   random_seed: 0
  #   solver: HODLRSolver
  #   rearrange_fn: rearrange_graph_kernighan
  #   re_rearrange: True
  #   rearrange_kwargs:
  #     k: 2
  #     max_iter: 10
  #   kernel: ExpSquaredKernel
  #   kernel_kwargs:
  #     lengthscale: 1.0
  #     scale_variance: population
  #     noise_variance: 0.01
  #   optimizer_kwargs:
  #     method: L-BFGS-B
  #   model_kwargs:
  #     tol: 0.1
  #     min_size: 100

  # GeorgeGP:
  #   random_seed: 0
  #   solver: HODLRSolver
  #   rearrange_fn: rearrange_kmeans
  #   re_rearrange: False
  #   rearrange_kwargs:
  #     n_clusters: 32
  #   kernel: ExpSquaredKernel
  #   kernel_kwargs:
  #     lengthscale: 1.0
  #     scale_variance: population
  #     noise_variance: 0.01
  #   optimizer_kwargs:
  #     method: L-BFGS-B
  #   model_kwargs:
  #     tol: 0.1
  #     min_size: 100

  # GeorgeGP:
  #   random_seed: 0
  #   solver: HODLRSolver
  #   rearrange_fn: rearrange_kmeans_eq
  #   re_rearrange: False
  #   rearrange_kwargs:
  #     n_clusters: 32
  #   kernel: ExpSquaredKernel
  #   kernel_kwargs:
  #     lengthscale: 1.0
  #     scale_variance: population
  #     noise_variance: 0.01
  #   optimizer_kwargs:
  #     method: L-BFGS-B
  #   model_kwargs:
  #     tol: 0.1
  #     min_size: 100

  # GeorgeGP:
  #   random_seed: 0
  #   solver: HODLRSolver
  #   rearrange_fn: rearrange_ga
  #   re_rearrange: True
  #   rearrange_kwargs:
  #     opt_N: 100
  #     init_N: 10
  #   kernel: ExpSquaredKernel
  #   kernel_kwargs:
  #     lengthscale: 1.0
  #     scale_variance: population
  #     noise_variance: 0.01
  #   optimizer_kwargs:
  #     method: L-BFGS-B
  #   model_kwargs:
  #     tol: 0.1
  #     min_size: 100

  # GeorgeGP:
  #   random_seed: 0
  #   solver: HODLRSolver
  #   rearrange_fn: rearrange_placebo
  #   kernel: ExpSquaredKernel
  #   kernel_kwargs:
  #     lengthscale: 1.0
  #     scale_variance: population
  #     noise_variance: 0.01
  #   optimizer_kwargs:
  #     method: L-BFGS-B
  #   model_kwargs:
  #     tol: 0.1
  #     min_size: 100

  # GeorgeGP:
  #   random_seed: 0
  #   solver: HODLRSolver
  #   rearrange_fn: rearrange_random
  #   re_rearrange: True
  #   kernel: ExpSquaredKernel
  #   kernel_kwargs:
  #     lengthscale: 1.0
  #     scale_variance: population
  #     noise_variance: 0.01
  #   optimizer_kwargs:
  #     method: L-BFGS-B
  #   model_kwargs:
  #     tol: 0.1
  #     min_size: 100

  # GeorgeGP:
  #   random_seed: 0
  #   solver: BasicSolver
  #   kernel: ExpSquaredKernel
  #   kernel_kwargs:
  #     lengthscale: 1.0
  #     scale_variance: population
  #     noise_variance: 0.01
  #   optimizer_kwargs:
  #     method: L-BFGS-B
  

  # PyTorchAlexanderGP:
  #   random_seed: 0
  #   kernel: RBFKernel
  #   output_device: cuda:0
  #   n_devices: 1
  #   preconditioner_size: 100
  #   kernel_kwargs:
  #     lengthscale: 1.0
  #     scale_variance: population
  #     noise_variance: 0.01
  #   optimizer_kwargs:
  #     max_iter: 15000

  # PyTorchAlexanderGP:
  #   m_repeats: 1
  #   random_seed: 0
  #   kernel: RBFKernel
  #   output_device: cpu
  #   n_devices: 1
  #   preconditioner_size: 100
  #   kernel_kwargs:
  #     lengthscale: 1.0
  #     scale_variance: population
  #     noise_variance: 0.01
  #   optimizer_kwargs:
  #     max_iter: 15000

  # PyTorchGP:
  #   random_seed: 0
  #   kernel: RBFKernel
  #   output_device: cuda:0
  #   n_devices: 1
  #   kernel_kwargs:
  #     lengthscale: 1.0
  #     scale_variance: population
  #     noise_variance: 0.01
  #   optimizer_kwargs:
  #     max_iter: 15000

  # PyTorchGP:
  #   random_seed: 0
  #   kernel: RBFKernel
  #   output_device: cpu
  #   n_devices: 1
  #   kernel_kwargs:
  #     lengthscale: 1.0
  #     scale_variance: population
  #     noise_variance: 0.01
  #   optimizer_kwargs:
  #     max_iter: 15000